server.port=0

# JPA
spring.jpa.show-sql=true

# JACKSON
spring.jackson.serialization.INDENT_OUTPUT=true

# ERRORS
error.whitelabel.enabled=true

# LOGGING
logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=DEBUG

# Nombre de la variable que viene en el header
javatab.token.header=AuthToken
#Palabra clave para el cifrado.
javatab.token.secret=xRwQuQ
#Tiempo de expiración de token, en minutos.
javatab.token.expiration=30

# Rutas /app/
javatab.route.autenticacion=auth
javatab.route.authentication.refrescar=refrescar
javatab.route.protected=protegido
javatab.route.todo=todo
javatab.route.user=usuario


#Conector BD
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/mydb
spring.datasource.username=root
#spring.datasource.password=

spring.jpa.hibernate.ddl-auto=update


# Default profile
spring.profiles.active=local

# DataSource settings: set here your own configurations for the database 
# connection. In this example we have "netgloo_blog" as database name and 
# "root" as username and password.
#spring.datasource.url = jdbc:mysql://localhost:3306/mydb
#spring.datasource.username = root
#spring.datasource.password = 123456

# Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle = true
#spring.datasource.validationQuery = SELECT 1

# Show or not log for each sql query
#spring.jpa.show-sql = true
#
# Hibernate ddl auto (create, create-drop, update)
#spring.jpa.hibernate.ddl-auto = update

# Naming strategy
#spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager)

# The SQL dialect makes Hibernate generate better SQL for the chosen database
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect